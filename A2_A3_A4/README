IMPORTANT: New changes in parser.mly . Please update submission
            Changes in the last lines of parser.mly

To generate the lexer, run:
    make lexer

To generate the parser, run:
    make parser

To generate both, run:
    make lexer parser

To clean parser dependecy files, run:
    make clean_parser

To clean lexer dependency files, run:
    make clean_lexer

To clean both, run:
    make clean_lexer clean_parser

To generate the tokens file (code_file-lex), run:
    ./lexer code_file

To parse the tokens file (code_file-lex), run:
    ./parser code_file-lex data_file.csv


General Steps:
 1. Clean all existing lexer or parser dependencies:  
            make clean_lexer clean_parser
 2. Create lexer and parser
            make lexer parser
 3. Create the tokens file (which has the name of the input code file suffixed with "-lex")
            ./lexer code_file
 4. Parse (and run) the tokenized file (giving token file and sheet csv as inputs)
            ./parser code_file-lex data_file.csv

Notes:

The Ocamlyacc parser reads a sequence of tokens as its input, and groups the tokens using the grammar rules. If
the input is valid, the end result is that the entire token sequence reduces to a single grouping whose symbol is
the grammar’s start symbol. If we use a grammar for C, the entire input must be a ‘sequence of definitions and
declarations’. If not, the parser reports a syntax error.

The Ocamlyacc representation for a terminal symbol is also called a token types.
The token type is a terminal symbol defined in the grammar, such as INTEGER, IDENTIFIER or SEMICOLON. It tells
everything you need to know to decide where the token may validly appear and how to group it with other tokens.
The grammar rules know nothing about tokens except their types.

Semantic Values

The semantic value has all the rest of the information about the meaning of the token, such as the value of an
integer, or the name of an identifier. (A token such as SEMICOLON which is just punctuation doesn’t need to have
any semantic value.)

 When the parser accepts the token, it keeps track of the token’s semantic value.

Each grouping can also have a semantic value as well as its nonterminal symbol. For example, in a calculator,
an expression typically has a semantic value that is a number. In a compiler for a programming language, an
expression typically has a semantic value that is a tree structure describing the meaning of the expression.

Semantic Actions

In order to be useful, a program must do more than parse input; it must also produce some output based on the
input. In a Ocamlyacc grammar, a grammar rule can have an action made up of Ocaml statements. Each time the
parser recognizes a match for that rule, the action is executed. See Actions,

In order to be useful, a program must do more than parse input; it must also produce some output based on the
input. In a Ocamlyacc grammar, a grammar rule can have an action made up of Ocaml statements. Each time the
parser recognizes a match for that rule, the action is executed. See Actions,
Most of the time, the purpose of an action is to compute the semantic value of the whole construct from the
semantic values of its parts. For example, suppose we have a rule which says an expression can be the sum of
two expressions. When the parser recognizes such a sum, each of the subexpressions has a semantic value which
describes how it was built up. The action for this rule should create a similar sort of value for the newly recognized
larger expression.
For example, here is a rule that says an expression can be the sum of two subexpressions:
                    expr: expr PLUS expr { $1 + $3 }

The action says how to produce the semantic value of the sum expression from the values of the two subexpressions.

 Locations
Many applications, like interpreters or compilers, have to produce verbose and useful error messages. To achieve
this, one must be able to keep track of the textual position, or location, of each syntactic construct. Ocamlyacc provides a mechanism for handling these locations.
Each token has a semantic value. In a similar fashion, each token has an associated location, but the type of
locations is the same for all tokens and groupings

Parser file

The job of the Ocamlyacc parser is to group tokens into groupings according to the grammar rules---for example,
to build identifiers and operators into expressions. As it does this, it runs the actions for the grammar rules it uses

The tokens come from a function called the lexical analyzer that you must supply in some fashion. The Ocamlyacc
parser calls the lexical analyzer each time it wants a new token. It doesn’t know what is “inside” the tokens (though
their semantic values may reflect this). 




The Overall Layout of a Ocamlyacc Grammar
The input file for the Ocamlyacc utility is a Ocamlyacc grammar file. The general form of a Ocamlyacc grammar
file is as follows:
%{
Header (Ocaml code)
%}
Ocamlyacc declarations
%%
Grammar rules
%%
Trailer (Additional Ocaml code)
The %%, %{ and %} are punctuation that appears in every Ocamlyacc grammar file to separate the sections.
The header may define types, variables and functions used in the actions.
The Ocamlyacc declarations declare the names of the terminal and nonterminal symbols, and may also describe
operator precedence and the data types of semantic values of various symbols.
The grammar rules define how to construct each nonterminal symbol from its parts.
The Trailer can contain any Ocaml code you want to use.