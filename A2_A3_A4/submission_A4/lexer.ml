# 1 "lexer.mll"
 
type token = 
    | INT of int 
    | FLOAT of float 
    | BINARYOP of string
    | UNARYOP of string
    | ASSIGNMENT
    | SEMICOLON
    | COLON
    | COMMA
    | LBRACKET
    | RBRACKET
    | LPAREN
    | RPAREN

exception EOF

# 20 "lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base = 
   "\000\000\242\255\000\000\001\000\000\000\001\000\000\000\001\000\
    \245\255\246\255\247\255\249\255\250\255\251\255\000\000\046\000\
    \061\000\073\000\255\255\085\000\095\000\252\255\000\000\002\000\
    \244\255\243\255\012\000\000\000\000\000\003\000\000\000\006\000\
    \006\000\077\000\089\000\027\000\024\000\090\000\034\000\047\000\
    \078\000\073\000\081\000\076\000\084\000\001\000\076\000\087\000\
    \080\000\103\000\104\000\085\000\088\000\095\000\090\000\098\000\
    \094\000\102\000\004\000\093\000\104\000";
  Lexing.lex_backtrk = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\007\000\255\255\
    \255\255\001\000\255\255\002\000\002\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255";
  Lexing.lex_default = 
   "\255\255\000\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\255\255\255\255\
    \255\255\255\255\000\000\255\255\255\255\000\000\255\255\255\255\
    \000\000\000\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255";
  Lexing.lex_trans = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\018\000\018\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \018\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \009\000\008\000\000\000\016\000\010\000\016\000\015\000\000\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\014\000\013\000\000\000\021\000\000\000\000\000\
    \000\000\007\000\028\000\003\000\004\000\023\000\024\000\025\000\
    \025\000\032\000\029\000\025\000\031\000\005\000\027\000\048\000\
    \033\000\025\000\002\000\006\000\024\000\026\000\030\000\022\000\
    \025\000\025\000\024\000\012\000\024\000\011\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \016\000\036\000\016\000\015\000\025\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\015\000\
    \045\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\015\000\044\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\034\000\038\000\046\000\040\000\041\000\042\000\043\000\
    \025\000\025\000\035\000\047\000\025\000\025\000\037\000\049\000\
    \051\000\059\000\053\000\058\000\039\000\057\000\054\000\055\000\
    \056\000\060\000\025\000\025\000\050\000\025\000\025\000\000\000\
    \000\000\000\000\052\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000";
  Lexing.lex_check = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\255\255\000\000\000\000\000\000\000\000\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\255\255\014\000\255\255\255\255\
    \255\255\000\000\005\000\000\000\000\000\007\000\023\000\022\000\
    \045\000\004\000\005\000\058\000\030\000\000\000\026\000\002\000\
    \003\000\029\000\000\000\000\000\027\000\006\000\005\000\007\000\
    \028\000\026\000\031\000\000\000\032\000\000\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \016\000\035\000\016\000\016\000\036\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\017\000\
    \038\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\019\000\039\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\033\000\034\000\037\000\034\000\040\000\041\000\042\000\
    \043\000\044\000\033\000\037\000\046\000\047\000\034\000\048\000\
    \049\000\050\000\049\000\051\000\034\000\052\000\053\000\054\000\
    \055\000\050\000\056\000\057\000\049\000\059\000\060\000\255\255\
    \255\255\255\255\049\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255";
  Lexing.lex_base_code = 
   "";
  Lexing.lex_backtrk_code = 
   "";
  Lexing.lex_default_code = 
   "";
  Lexing.lex_trans_code = 
   "";
  Lexing.lex_check_code = 
   "";
  Lexing.lex_code = 
   "";
}

let rec token lexbuf =
    __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 20 "lexer.mll"
                                                                 (token lexbuf )
# 164 "lexer.ml"

  | 1 ->
let
# 21 "lexer.mll"
                    lxm
# 170 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 21 "lexer.mll"
                                                            (INT(int_of_string lxm) )
# 174 "lexer.ml"

  | 2 ->
let
# 22 "lexer.mll"
                                                lxm
# 180 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 22 "lexer.mll"
                                                            (FLOAT(float_of_string lxm) )
# 184 "lexer.ml"

  | 3 ->
# 23 "lexer.mll"
                                                            (ASSIGNMENT)
# 189 "lexer.ml"

  | 4 ->
# 24 "lexer.mll"
                                                            (SEMICOLON)
# 194 "lexer.ml"

  | 5 ->
# 25 "lexer.mll"
                                                            (LBRACKET)
# 199 "lexer.ml"

  | 6 ->
# 26 "lexer.mll"
                                                            (RBRACKET)
# 204 "lexer.ml"

  | 7 ->
# 27 "lexer.mll"
                                                            (COLON)
# 209 "lexer.ml"

  | 8 ->
# 28 "lexer.mll"
                                                            (COMMA)
# 214 "lexer.ml"

  | 9 ->
# 29 "lexer.mll"
                                                            (LPAREN)
# 219 "lexer.ml"

  | 10 ->
# 30 "lexer.mll"
                                                            (RPAREN)
# 224 "lexer.ml"

  | 11 ->
let
# 35 "lexer.mll"
                op
# 230 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 35 "lexer.mll"
                                                            (BINARYOP(op))
# 234 "lexer.ml"

  | 12 ->
let
# 51 "lexer.mll"
                   op
# 240 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 51 "lexer.mll"
                                                            (UNARYOP(op))
# 244 "lexer.ml"

  | 13 ->
# 53 "lexer.mll"
                                                            (raise EOF)
# 249 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

;;

# 57 "lexer.mll"
 
let main () = begin
    let outbuf = Buffer.create 255 in
    try
        let filename = Sys.argv.(1) in
        let file_handle = open_in filename in
        let lexbuf = Lexing.from_channel file_handle in
        while true do
            let result = token lexbuf in
            match result with
                | INT(x) -> Printf.bprintf outbuf "INT \n%d \n" x
                | FLOAT(x) -> Printf.bprintf outbuf "FLOAT \n%f \n" x
                | BINARYOP(x) -> Printf.bprintf outbuf "BINARYOP \n%s \n" x
                | UNARYOP(x) -> Printf.bprintf outbuf "UNARYOP \n%s \n" x
                | ASSIGNMENT -> Printf.bprintf outbuf "ASSIGNMENT \n"
                | SEMICOLON -> Printf.bprintf outbuf "SEMICOLON \n"
                | LPAREN -> Printf.bprintf outbuf "LPAREN \n"
                | RPAREN -> Printf.bprintf outbuf "RPAREN \n"
                | LBRACKET -> Printf.bprintf outbuf "LBRACKET \n"
                | RBRACKET -> Printf.bprintf outbuf "RBRACKET \n"
                | COLON -> Printf.bprintf outbuf "COLON \n"
                | COMMA -> Printf.bprintf outbuf "COMMA \n"

        done
    with |  EOF -> begin
            let filename = Sys.argv.(1) ^ "-lex" in
            let file_handle = open_out filename in
            Printf.fprintf file_handle "%s" (Buffer.contents outbuf); 
            close_out file_handle
         end
         | _ -> begin
            Printf.printf "Error while printing to file";
            exit 1
         end   
end;;
main () ;;

# 294 "lexer.ml"
